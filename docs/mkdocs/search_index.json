{
    "docs": [
        {
            "location": "/",
            "text": "Retrieving Data\n\n\nFlat table\n\n\nUsing the following table \narticles\n:\n\n\n\n\n\n\n\n\nid\n\n\ntitle\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSweet Baby Ray's is the best!\n\n\n\n\n\n\n2\n\n\nPB&J is yummy\n\n\n\n\n\n\n3\n\n\nI like Jellyfish\n\n\n\n\n\n\n\n\nFirst model the table:\n\n\nnamespace Application\\Model;\nclass Article {\n  public $id,$title;\n}\n\n\n\n\nThen in the config:\n\n\n'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n  ]\n]\n\n\n\n\nAnd finally, simple use it:\n\n\n// $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$entity = $table->fetchWithId(2);\n\n// Outputs: \"PB&J is yummy\"\necho $entity->title;\n\n\n\n\nOne-to-many relationships\n\n\nWith a table \narticles\n:\n\n\n\n\n\n\n\n\nid\n\n\ntitle\n\n\nauthor\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSweet Baby Ray's is the best!\n\n\n1\n\n\n\n\n\n\n2\n\n\nPB&J is yummy\n\n\n1\n\n\n\n\n\n\n3\n\n\nI like Jellyfish\n\n\n2\n\n\n\n\n\n\n\n\nand another table \nauthors\n:\n\n\n\n\n\n\n\n\nid\n\n\nName\n\n\n\n\n\n\n\n\n\n\n1\n\n\nNathan Smith\n\n\n\n\n\n\n2\n\n\nFake Name\n\n\n\n\n\n\n\n\nStart by modeling the entity for both:\n\n\nThe article:\n\n\nnamespace Application\\Model;\nclass Article {\n  public $id,$title,$author;\n}\n\n\n\n\nand the author\n\n\nnamespace Application\\Model;\nclass Author {\n  public $id,$name;\n}\n\n\n\n\nThen in the config, define both the \narticles\n and \nauthors\n table and use the \nlinked_tables\n key to configure the relationship:\n\n\n'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'author' => [\n        'name' => 'authors',\n        'type' => 'one_to_one',\n      ]\n    ]\n  ],\n  'authors' => [\n    'table_name' => 'authors',\n    'entity' => \\Application\\Model\\Author::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n  ]\n]\n\n\n\n\nThen use it:\n\n\n// $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$article = $table->fetchWithId(3);\n\n// Outputs: \"I like Jellyfish\"\necho $article->title;\n\n// Outputs: \"Fake Name\"\necho $article->author->name;\n\n\n\n\nMany-to-many relationships\n\n\nWith a table \narticles\n:\n\n\n\n\n\n\n\n\nid\n\n\ntitle\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSweet Baby Ray's is the best!\n\n\n\n\n\n\n2\n\n\nPB&J is yummy\n\n\n\n\n\n\n3\n\n\nI like Jellyfish\n\n\n\n\n\n\n\n\nand another table \nauthors\n:\n\n\n\n\n\n\n\n\nid\n\n\nName\n\n\n\n\n\n\n\n\n\n\n1\n\n\nNathan Smith\n\n\n\n\n\n\n2\n\n\nFake Name\n\n\n\n\n\n\n3\n\n\nJimmy Boi\n\n\n\n\n\n\n4\n\n\nJohn Doe\n\n\n\n\n\n\n\n\nand a mapping table \narticles_authors_map\n:\n\n\n\n\n\n\n\n\narticle_id\n\n\nauthor_id\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\n\n\n\n\n1\n\n\n3\n\n\n\n\n\n\n2\n\n\n3\n\n\n\n\n\n\n3\n\n\n4\n\n\n\n\n\n\n3\n\n\n2\n\n\n\n\n\n\n\n\nStart by modeling the entity for both:\n\n\nThe article:\n\n\nnamespace Application\\Model;\nclass Article {\n  public $id,$title,$authors;\n}\n\n\n\n\nand the author\n\n\nnamespace Application\\Model;\nclass Author {\n  public $id,$name,$articles;\n}\n\n\n\n\nThen in the config, define both the \narticles\n , \nauthors\n, and \narticles_authors_map\n tables and use the \nlinked_tables\n key for the \narticles\n and \nauthors\n table to configure the two-way relationship:\n\n\n'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'authors' => [\n        'type' => 'many_to_many',\n        'remote_table' => 'authors',\n        'mapping_table' => 'articles_authors_map',\n        'local_column' => 'id',\n        'local_property' => 'id',\n        'local_mapping_column' => 'article_id',\n        'remote_mapping_column' => 'author_id',\n        'remote_column' => 'id',\n      ]\n    ]\n  ],\n  'authors' => [\n    'table_name' => 'authors',\n    'entity' => \\Application\\Model\\Author::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'articles' => [\n        'type' => 'many_to_many',\n        'remote_table' => 'authors',\n        'mapping_table' => 'articles_authors_map',\n        'local_column' => 'id',\n        'local_property' => 'id',\n        'local_mapping_column' => 'author_id',\n        'remote_mapping_column' => 'article_id',\n        'remote_column' => 'id',\n      ]\n    ]\n  ],\n  'articles_authors_map' => [\n    'table_name' => 'articles_authors_map',\n  ]\n]\n\n\n\n\nThen use it:\n\n\n// $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$article = $table->fetchWithId(3);\n\n// Outputs: \"I like Jellyfish\"\necho $article->title;\n\n// Outputs: \"John Doe\" and \"Fake Name\"\nforeach($article->authors as $author) {\n  echo $author->name;\n}\n\n$table = $manager->get('authors');\n$author = $table->fetchWithId(3);\n\n// Outputs: \"Jimmy Boi\"\necho $author->name;\n\n// Outputs: \"Sweet Baby Ray's is the best!\" and \"PB&J is yummy\"\nforeach($author->articles as $article) {\n  echo $article->title;\n}\n\n\n\n\nRelationships aren't one level deep\n\n\nAny linked tabled contain all the defined relationships all the time\n\n\nWith a table \narticles\n:\n\n\n\n\n\n\n\n\nid\n\n\ntitle\n\n\nauthor\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSweet Baby Ray's is the best!\n\n\n1\n\n\n\n\n\n\n2\n\n\nPB&J is yummy\n\n\n1\n\n\n\n\n\n\n3\n\n\nI like Jellyfish\n\n\n2\n\n\n\n\n\n\n\n\nand another table \nauthors\n:\n\n\n\n\n\n\n\n\nid\n\n\nName\n\n\nCar\n\n\n\n\n\n\n\n\n\n\n1\n\n\nNathan Smith\n\n\n2\n\n\n\n\n\n\n2\n\n\nFake Name\n\n\n1\n\n\n\n\n\n\n\n\nand another table \ncars\n:\n\n\n\n\n\n\n\n\nid\n\n\nName\n\n\n\n\n\n\n\n\n\n\n1\n\n\nHonda Civic\n\n\n\n\n\n\n2\n\n\nTesla Model 3\n\n\n\n\n\n\n\n\nStart by modeling the entity for all:\n\n\nThe article:\n\n\nnamespace Application\\Model;\nclass Article {\n  public $id,$title,$author;\n}\n\n\n\n\nand the author\n\n\nnamespace Application\\Model;\nclass Author {\n  public $id,$name,$car;\n}\n\n\n\n\nand the car\n\n\nnamespace Application\\Model;\nclass Car {\n  public $id,$name,$car;\n}\n\n\n\n\nThen in the config, define the \narticles\n,  \nauthors\n, and \ncars\n tables and use the \nlinked_tables\n key to configure the relationships:\n\n\n'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'author' => [\n        'name' => 'authors',\n        'type' => 'one_to_one',\n      ]\n    ]\n  ],\n  'authors' => [\n    'table_name' => 'authors',\n    'entity' => \\Application\\Model\\Author::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'car' => [\n        'name' => 'cars',\n        'type' => 'one_to_one',\n      ]\n    ]\n  ],\n  'cars' => [\n    'table_name' => 'cars',\n    'entity' => \\Application\\Model\\Car::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n  ]\n]\n\n\n\n\nThen use it:\n\n\n// $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$article = $table->fetchWithId(3);\n\n// Outputs: \"I like Jellyfish\"\necho $article->title;\n\n// Outputs: \"Fake Name\"\necho $article->author->name;\n\n// Outputs: \"Honda Civic\"\necho $article->author->car->name;",
            "title": "Home"
        },
        {
            "location": "/#retrieving-data",
            "text": "",
            "title": "Retrieving Data"
        },
        {
            "location": "/#flat-table",
            "text": "Using the following table  articles :     id  title      1  Sweet Baby Ray's is the best!    2  PB&J is yummy    3  I like Jellyfish     First model the table:  namespace Application\\Model;\nclass Article {\n  public $id,$title;\n}  Then in the config:  'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n  ]\n]  And finally, simple use it:  // $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$entity = $table->fetchWithId(2);\n\n// Outputs: \"PB&J is yummy\"\necho $entity->title;",
            "title": "Flat table"
        },
        {
            "location": "/#one-to-many-relationships",
            "text": "With a table  articles :     id  title  author      1  Sweet Baby Ray's is the best!  1    2  PB&J is yummy  1    3  I like Jellyfish  2     and another table  authors :     id  Name      1  Nathan Smith    2  Fake Name     Start by modeling the entity for both:  The article:  namespace Application\\Model;\nclass Article {\n  public $id,$title,$author;\n}  and the author  namespace Application\\Model;\nclass Author {\n  public $id,$name;\n}  Then in the config, define both the  articles  and  authors  table and use the  linked_tables  key to configure the relationship:  'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'author' => [\n        'name' => 'authors',\n        'type' => 'one_to_one',\n      ]\n    ]\n  ],\n  'authors' => [\n    'table_name' => 'authors',\n    'entity' => \\Application\\Model\\Author::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n  ]\n]  Then use it:  // $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$article = $table->fetchWithId(3);\n\n// Outputs: \"I like Jellyfish\"\necho $article->title;\n\n// Outputs: \"Fake Name\"\necho $article->author->name;",
            "title": "One-to-many relationships"
        },
        {
            "location": "/#many-to-many-relationships",
            "text": "With a table  articles :     id  title      1  Sweet Baby Ray's is the best!    2  PB&J is yummy    3  I like Jellyfish     and another table  authors :     id  Name      1  Nathan Smith    2  Fake Name    3  Jimmy Boi    4  John Doe     and a mapping table  articles_authors_map :     article_id  author_id      1  1    1  3    2  3    3  4    3  2     Start by modeling the entity for both:  The article:  namespace Application\\Model;\nclass Article {\n  public $id,$title,$authors;\n}  and the author  namespace Application\\Model;\nclass Author {\n  public $id,$name,$articles;\n}  Then in the config, define both the  articles  ,  authors , and  articles_authors_map  tables and use the  linked_tables  key for the  articles  and  authors  table to configure the two-way relationship:  'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'authors' => [\n        'type' => 'many_to_many',\n        'remote_table' => 'authors',\n        'mapping_table' => 'articles_authors_map',\n        'local_column' => 'id',\n        'local_property' => 'id',\n        'local_mapping_column' => 'article_id',\n        'remote_mapping_column' => 'author_id',\n        'remote_column' => 'id',\n      ]\n    ]\n  ],\n  'authors' => [\n    'table_name' => 'authors',\n    'entity' => \\Application\\Model\\Author::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'articles' => [\n        'type' => 'many_to_many',\n        'remote_table' => 'authors',\n        'mapping_table' => 'articles_authors_map',\n        'local_column' => 'id',\n        'local_property' => 'id',\n        'local_mapping_column' => 'author_id',\n        'remote_mapping_column' => 'article_id',\n        'remote_column' => 'id',\n      ]\n    ]\n  ],\n  'articles_authors_map' => [\n    'table_name' => 'articles_authors_map',\n  ]\n]  Then use it:  // $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$article = $table->fetchWithId(3);\n\n// Outputs: \"I like Jellyfish\"\necho $article->title;\n\n// Outputs: \"John Doe\" and \"Fake Name\"\nforeach($article->authors as $author) {\n  echo $author->name;\n}\n\n$table = $manager->get('authors');\n$author = $table->fetchWithId(3);\n\n// Outputs: \"Jimmy Boi\"\necho $author->name;\n\n// Outputs: \"Sweet Baby Ray's is the best!\" and \"PB&J is yummy\"\nforeach($author->articles as $article) {\n  echo $article->title;\n}",
            "title": "Many-to-many relationships"
        },
        {
            "location": "/#relationships-arent-one-level-deep",
            "text": "Any linked tabled contain all the defined relationships all the time  With a table  articles :     id  title  author      1  Sweet Baby Ray's is the best!  1    2  PB&J is yummy  1    3  I like Jellyfish  2     and another table  authors :     id  Name  Car      1  Nathan Smith  2    2  Fake Name  1     and another table  cars :     id  Name      1  Honda Civic    2  Tesla Model 3     Start by modeling the entity for all:  The article:  namespace Application\\Model;\nclass Article {\n  public $id,$title,$author;\n}  and the author  namespace Application\\Model;\nclass Author {\n  public $id,$name,$car;\n}  and the car  namespace Application\\Model;\nclass Car {\n  public $id,$name,$car;\n}  Then in the config, define the  articles ,   authors , and  cars  tables and use the  linked_tables  key to configure the relationships:  'auto_tables' => [\n  'articles' => [\n    'table_name' => 'articles',\n    'entity' => \\Application\\Model\\Article::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'author' => [\n        'name' => 'authors',\n        'type' => 'one_to_one',\n      ]\n    ]\n  ],\n  'authors' => [\n    'table_name' => 'authors',\n    'entity' => \\Application\\Model\\Author::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n    'linked_tables' => [\n      'car' => [\n        'name' => 'cars',\n        'type' => 'one_to_one',\n      ]\n    ]\n  ],\n  'cars' => [\n    'table_name' => 'cars',\n    'entity' => \\Application\\Model\\Car::class,\n    'hydrator' => \\Zend\\Hydrator\\ObjectProperty::class,\n  ]\n]  Then use it:  // $serviceLocator is an instance of the main ServiceManager\n$manager = $serviceLocator->get(\\AutoTable\\AutoTableManager::class);\n$table = $manager->get('articles');\n$article = $table->fetchWithId(3);\n\n// Outputs: \"I like Jellyfish\"\necho $article->title;\n\n// Outputs: \"Fake Name\"\necho $article->author->name;\n\n// Outputs: \"Honda Civic\"\necho $article->author->car->name;",
            "title": "Relationships aren't one level deep"
        }
    ]
}